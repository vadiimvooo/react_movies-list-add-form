{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","isInvalidData","htmlFor","classNames","type","placeholder","onBlur","NewMovie","onAdd","count","setCount","defaultMovie","fields","setFields","pattern","shouldSubmit","Object","entries","filter","field","every","trim","length","handleInputChange","event","target","onClick","preventDefault","isValidImgUrl","match","isValidImdbUrl","prev","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.633a3e5e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched\n    && required\n    && !value;\n\n  const isInvalidData = value === 'Invalid IMDB URL'\n    || value === 'Invalid URL';\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          name={name}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {isInvalidData && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const defaultMovie: Movie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n  const [fields, setFields] = useState(defaultMovie);\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const shouldSubmit = Object.entries(fields)\n    .filter(field => field[0] !== 'description')\n    .every(field => field[1].trim().length > 0);\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setFields({\n      ...fields,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const handleClickButton = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    event.preventDefault();\n\n    const isValidImgUrl = fields.imgUrl.match(pattern);\n    const isValidImdbUrl = fields.imdbUrl.match(pattern);\n\n    if (!isValidImgUrl) {\n      setFields({\n        ...fields,\n        imgUrl: 'Invalid URL',\n      });\n\n      return;\n    }\n\n    if (!isValidImdbUrl) {\n      setFields({\n        ...fields,\n        imdbUrl: 'Invalid IMDB URL',\n      });\n\n      return;\n    }\n\n    onAdd(fields);\n\n    setFields(defaultMovie);\n\n    setCount(prev => prev + 1);\n  };\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbId,\n    imdbUrl,\n  } = fields;\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(event) => handleInputChange(event)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(event) => handleInputChange(event)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(event) => handleInputChange(event)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(event) => handleInputChange(event)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(event) => handleInputChange(event)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleClickButton}\n            disabled={!shouldSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMovies(prev => [...prev, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}